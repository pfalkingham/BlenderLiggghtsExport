import os
import math
import bpy

def write_setup_file(filepath, simulation_params, sim_min, sim_max, ins_min, ins_max):
    """Write the setup.liggghts file with the given simulation parameters and extents."""
    with open(filepath, "w") as file:
        file.write("# LIGGGHTS setup script generated with Blender->LIGGGHTS Addon\n")
        file.write("#----------SET UP FOLDER FOR OUTPUT----------#\n")
        file.write("shell mkdir post\n\n")

        file.write("#----------SYSTEM VARIABLES----------#\n")
        file.write(f"variable r equal {simulation_params['radius']}\n")
        file.write(f"variable E equal {simulation_params['youngs_modulus']}\n")
        file.write(f"variable f equal 0.8\n")
        file.write(f"variable c equal {simulation_params['cohesion']}\n")
        file.write(f"variable d equal 1200\n")
        file.write(f"variable v equal {simulation_params['poisson_ratio']}\n")
        file.write(f"variable s equal {simulation_params['timestep']}\n")
        file.write(f"variable t equal 1\n")
        file.write(f"variable n equal round($t/$s)\n\n")

        file.write("#----------SIMULATION SETTINGS----------#\n")
        file.write("units si\n")
        file.write("atom_style granular\n")
        file.write("boundary f f f\n")
        file.write("newton off\n")
        file.write("communicate single vel yes\n")
        file.write("neighbor $r bin\n")
        file.write("neigh_modify every 1 delay 0 check yes\n\n")

        file.write(f"region domain block {sim_min[0]} {sim_max[0]} {sim_min[1]} {sim_max[1]} {sim_min[2]} {sim_max[2]} units box\n")
        file.write("create_box 1 domain\n\n")

        file.write("#----------MATERIAL PROPERTIES----------#\n")
        file.write("fix m1 all property/global youngsModulus peratomtype $E\n")
        file.write("fix m2 all property/global poissonsRatio peratomtype $v\n")
        file.write("fix m3 all property/global coefficientRestitution peratomtypepair 1 0.9\n")
        file.write("fix m4 all property/global coefficientFriction peratomtypepair 1 $f\n")
        file.write("fix m5 all property/global characteristicVelocity scalar 1.0\n")
        file.write("fix m6 all property/global cohesionEnergyDensity peratomtypepair 1 $c\n\n")

        file.write("#----------PARTICLE INSERTION----------#\n")
        file.write("fix pts1 all particletemplate/sphere 15485863 atom_type 1 density constant $d radius constant $r\n")
        file.write("fix pdd1 all particledistribution/discrete 32452843 1 pts1 1.0\n")
        file.write(f"region ins_tray block {ins_min[0]} {ins_max[0]} {ins_min[1]} {ins_max[1]} {ins_min[2]} {ins_max[2]} units box\n")
        file.write("fix ins all insert/pack seed 86028157 distributiontemplate pdd1 insert_every 10000 overlapcheck yes all_in yes region ins_tray volumefraction_region 0.6\n\n")

        file.write("#----------WALLS----------#\n")
        file.write("fix simtray all mesh/surface file simtray.stl type 1\n")
        file.write("fix cont all wall/gran model hertz tangential history mesh n_meshes 1 meshes simtray\n\n")

        file.write("#----------FORCE MODEL----------#\n")
        file.write("pair_style gran model hertz tangential history cohesion sjkr tangential_reduce on\n")
        file.write("pair_coeff * *\n\n")

        file.write("#----------ADDITIONAL SETTINGS----------#\n")
        file.write("fix nsph all nve/sphere\n")
        file.write("fix gravi all gravity 9.81 vector 0.0 0.0 -1.0\n")
        file.write("timestep $s\n\n")

        file.write("#----------COMPUTATION----------#\n")
        file.write("compute rke all erotate/sphere\n")
        file.write("compute mudisp all displace/atom\n\n")

        file.write("#----------RUN SPECIFICS----------#\n")
        file.write("run 200000\n")
        file.write("unfix ins\n\n")

        file.write("write_restart restart.res\n")

def write_run_file(filepath, simulation_params, moving_objects, frame_rate, deformable=False):
    """Write the run.liggghts file with motion, rotation, and deformable logic."""
    with open(filepath, "w") as file:
        file.write("# This LIGGGHTS input file was autoGenerated using Blender->LIGGGHTS Addon\n\n")

        file.write("#----------SET UP FOLDER FOR OUTPUT----------#\n")
        file.write("shell mkdir post\n\n")

        file.write("#----------SYSTEM VARIABLES----------#\n")
        file.write(f"variable r equal {simulation_params['radius']}\n")
        file.write(f"variable E equal {simulation_params['youngs_modulus']}\n")
        file.write("variable f equal 0.8\n")
        file.write(f"variable c equal {simulation_params['cohesion']}\n")
        file.write("variable d equal 1200\n")
        file.write(f"variable v equal {simulation_params['poisson_ratio']}\n")
        file.write(f"variable s equal {simulation_params['timestep']}\n")
        file.write("variable e equal 4000\n\n")

        file.write("#----------SIMULATION SETTINGS----------#\n")
        file.write("units si\n")
        file.write("atom_style granular\n")
        file.write("boundary f f f\n")
        file.write("newton off\n")
        file.write("communicate single vel yes\n")
        file.write("neighbor $r bin\n")
        file.write("neigh_modify every 1 delay 0 check yes\n\n")

        file.write("#----------READ THE RESTART FILE----------#\n")
        file.write("read_restart restart.res\n\n")

        file.write("#----------MATERIAL PROPERTIES----------#\n")
        file.write("fix m1 all property/global youngsModulus peratomtype $E\n")
        file.write("fix m2 all property/global poissonsRatio peratomtype $v\n")
        file.write("fix m3 all property/global coefficientRestitution peratomtypepair 1 0.1\n")
        file.write("fix m4 all property/global coefficientFriction peratomtypepair 1 $f\n")
        file.write("fix m5 all property/global characteristicVelocity scalar 1.0\n")
        file.write("fix m6 all property/global cohesionEnergyDensity peratomtypepair 1 $c\n\n")

        file.write("#----------FORCE MODEL----------#\n")
        file.write("pair_style gran model hertz tangential history cohesion sjkr2 tangential_reduce on\n")
        file.write("pair_coeff * *\n\n")

        file.write("#----------ADDITIONAL SETTINGS----------#\n")
        file.write("fix nsph all nve/sphere\n")
        file.write("fix gravi all gravity 9.81 vector 0.0 0.0 -1.0\n")
        file.write("timestep $s\n\n")

        file.write("#--------INITIALIZATION OF MESHES-----#\n")
        file.write("fix tray all mesh/surface file simtray.stl type 1\n")

        for obj in moving_objects:
            if deformable:
                file.write(f"fix {obj.name} all mesh/surface file {obj.name}_1.stl type 1 curvature_tolerant yes\n")
            else:
                file.write(f"fix {obj.name} all mesh/surface file {obj.name}.stl type 1 curvature_tolerant yes\n")

        file.write("fix cont1 all wall/gran model hertz tangential history mesh n_meshes {count} meshes tray ".format(count=len(moving_objects) + 1))
        for obj in moving_objects:
            file.write(f" {obj.name}")
        file.write("\n\n")

        file.write("#--------COMPUTATION----------#\n")
        file.write("compute rke all erotate/sphere\n")
        file.write("compute mudisp all displace/atom\n")
        if not deformable:
            file.write("compute fc all wall/gran/local id pos force\n\n")

        file.write("#----------DUMP FILES----------#\n")
        file.write("dump dmp all custom $e post/dump*.bin id x y z radius\n")
        file.write("dump dumpstl1 all mesh/vtk $e post/footcomp2_*.vtk id")
        for obj in moving_objects:
            file.write(f" {obj.name}")
        file.write("\n\n")

        file.write("run 4000\n\n")

        if deformable:
            file.write("# Deformable mesh logic\n")
            file.write("undump dumpstl1\n")
            file.write("unfix cont1\n")
            for obj in moving_objects:
                file.write(f"unfix {obj.name}\n")
                file.write(f"fix {obj.name} all mesh/surface file {obj.name}_2.stl type 1 curvature_tolerant yes\n")
            file.write("fix cont1 all wall/gran model hertz tangential history mesh n_meshes {count} meshes tray ".format(count=len(moving_objects) + 1))
            for obj in moving_objects:
                file.write(f" {obj.name}")
            file.write("\n")
            file.write("dump dumpstl1 all mesh/vtk $e post/footcomp2_*.vtk id")
            for obj in moving_objects:
                file.write(f" {obj.name}")
            file.write("\n\n")

        file.write("# Motion and rotation logic\n")
        scene = bpy.context.scene
        frame_start = scene.frame_start
        frame_end = scene.frame_end

        for frame in range(frame_start + 1, frame_end + 1):
            for obj in moving_objects:
                prev_frame = frame - 1
                scene.frame_set(prev_frame)
                prev_location = obj.matrix_world.translation
                prev_rotation = obj.matrix_world.to_euler()

                scene.frame_set(frame)
                curr_location = obj.matrix_world.translation
                curr_rotation = obj.matrix_world.to_euler()

                translation = curr_location - prev_location

                prev_rotation_quat = prev_rotation.to_quaternion()
                curr_rotation_quat = curr_rotation.to_quaternion()
                rotation_diff_quat = curr_rotation_quat.rotation_difference(prev_rotation_quat)

                axis, angle = rotation_diff_quat.axis, rotation_diff_quat.angle
                if angle > 0:
                    period = 360 / (angle * frame_rate)
                    file.write(f"fix rotate_{obj.name}_{frame} all move/mesh mesh {obj.name} rotate origin {prev_location.x} {prev_location.y} {prev_location.z} axis {axis.x} {axis.y} {axis.z} period {period}\n")

                file.write(f"fix move_{obj.name}_{frame} all move/mesh mesh {obj.name} linear {translation.x * frame_rate} {translation.y * frame_rate} {translation.z * frame_rate}\n")

            file.write(f"run {int(frame_rate)}\n")

            for obj in moving_objects:
                file.write(f"unfix move_{obj.name}_{frame}\n")
                file.write(f"unfix rotate_{obj.name}_{frame}\n")